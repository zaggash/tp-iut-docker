<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Docker et Orchestration</title><link>https://zaggash.github.io/tp-iut-docker/docker/</link><description>Recent content in Docker on Docker et Orchestration</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><lastBuildDate>Thu, 11 Jun 2020 23:03:22 +0200</lastBuildDate><atom:link href="https://zaggash.github.io/tp-iut-docker/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Travailler avec les conteneurs</title><link>https://zaggash.github.io/tp-iut-docker/docker/work_with_container/</link><pubDate>Thu, 11 Jun 2020 23:10:12 +0200</pubDate><guid>https://zaggash.github.io/tp-iut-docker/docker/work_with_container/</guid><description>Hello World Dans votre nouvel environnement, tapez la commande suivante:
$ docker run busybox echo hello world hello world Nous avons utilisé une des plus simple et petite image: busybox busybox est souvent utilisé dans les systèmes embarqués. Nous avons lancé un simple processus et affiché hello world La premiere fois que l&amp;rsquo;on lance un conteneur, l&amp;rsquo;image est chargée sur la machine, cela explique les lignes supplémentaires. Conteneur interactif Lançons un conteneur un peu plus sympa</description></item><item><title>Travailler avec les images</title><link>https://zaggash.github.io/tp-iut-docker/docker/work_with_images/</link><pubDate>Thu, 11 Jun 2020 23:10:12 +0200</pubDate><guid>https://zaggash.github.io/tp-iut-docker/docker/work_with_images/</guid><description>Qu&amp;rsquo;est ce qu&amp;rsquo;une image ? Une image est un ensemble de fichiers et de metadata.
Les fichiers constituent le FileSystem de notre conteneur. les metadata peuvent être de différentes formes le créateur de l&amp;rsquo;image les variables d&amp;rsquo;environnement les commandes à executer Les images sont en fait une superposition de couches appelées layers
Chaque layer ajoute, modifie ou supprime un fichier et/ou une metadata.
Les images peuvent partager des layers, ce qui permet d&amp;rsquo;optimiser l&amp;rsquo;utilisation de l&amp;rsquo;espace disque, les transferts réseaux</description></item><item><title>Copy-On-Write</title><link>https://zaggash.github.io/tp-iut-docker/docker/copy_on_write/</link><pubDate>Thu, 11 Jun 2020 23:10:12 +0200</pubDate><guid>https://zaggash.github.io/tp-iut-docker/docker/copy_on_write/</guid><description>Le copy-on-write Le copy-on-write ( CoW ) permet de partager les layers des images entre les conteneurs.
Dès que le conteneur à besoin d&amp;rsquo;ecrire dans un fichier existant dans une image, celui-ci est copié dans le layer en écriture du conteneur puis modifié.
On retrouve ce principe dans les snapshots BTRFS, le provisioning VMwawre,&amp;hellip;
Grâce à cela, le demarrage des conteneurs est rapide, pas besoin de copier l&amp;rsquo;image.
Le système de fichier CoW recommandé et supporté par docker est Overlay2</description></item></channel></rss>
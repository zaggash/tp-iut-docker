<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Docker et Orchestration</title><link>https://zaggash.github.io/tp-iut-docker/introduction/architecture/</link><description>Recent content in Architecture on Docker et Orchestration</description><generator>Hugo -- gohugo.io</generator><language>fr-fr</language><lastBuildDate>Mon, 08 Jun 2020 23:09:18 +0200</lastBuildDate><atom:link href="https://zaggash.github.io/tp-iut-docker/introduction/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Engine</title><link>https://zaggash.github.io/tp-iut-docker/introduction/architecture/internal_architecture/</link><pubDate>Tue, 09 Jun 2020 02:38:40 +0200</pubDate><guid>https://zaggash.github.io/tp-iut-docker/introduction/architecture/internal_architecture/</guid><description>Le Docker Engine est divisé en plusieurs parties.
dockerd (REST API, authentification, réseaux, stockage) : Fait appel à containerd containerd (Gère la vie des conteneurs, push/pull les images) runc (Lance l&amp;rsquo;application du conteneur) containerd-shim (Par conteneur; permet de separer le processus et RunC) Plusieurs fonctionnalitées sont progressivement deleguées du Docker Engine à containerd
Information Des exercices du TP permettrons de verifier cela après l&amp;rsquo;installation</description></item><item><title>Namespaces/Cgroups/CoW</title><link>https://zaggash.github.io/tp-iut-docker/introduction/architecture/namespaces_cgroups/</link><pubDate>Tue, 09 Jun 2020 03:02:54 +0200</pubDate><guid>https://zaggash.github.io/tp-iut-docker/introduction/architecture/namespaces_cgroups/</guid><description>Docker est extrémement lié au Kernel.
Le fonctionnement des conteneurs repose sur les namespaces, les cgroups et le CopyOnWrite.
Mais egalement d&amp;rsquo;autres aspects liés à la sécurité comme les CAPabilities, seccomp,&amp;hellip;
Ceux qui nous intéressent aujourd&amp;rsquo;hui sont les trois premiers : namespaces, cgroups et le CopyOnWrite.
Information Ces aspects seront abordés au cours des exercices du TP.
Brièvement, les namespaces permettent l&amp;rsquo;isolation des processus à différent niveaux (PID, User, Network, Mount)</description></item></channel></rss>